{"version":3,"file":"static/js/573.3e525494.chunk.js","mappings":"sJAIA,qBACI,IAAMA,GAAOC,EAAAA,EAAAA,GAAa,CAAEC,eAAe,IAErCC,EADaC,GAAAA,CAAkB,CAAEJ,KAAAA,IACZK,aAoB3B,OADAC,EAAAA,EAAAA,KAAe,+BAlBS,SAAlBC,gBAAmBC,EAAaC,GAAd,OACpBN,EAAQK,EAAKC,GAAMC,MAAK,SAACC,GACrB,IAAMC,EAAMC,KAAKC,MAAML,EAAKM,MACtBC,EAAYH,KAAKC,MAAMH,EAAII,MAYjC,OAXAE,QAAQC,eAAR,kBAAkCN,EAAIO,gBACtCF,QAAQG,MAAM,WACdH,QAAQI,IAAI,gBAAiBT,EAAIO,eACjCF,QAAQI,IAAIT,EAAIU,OAChBL,QAAQI,IAAI,YAAaT,EAAIW,WAC7BN,QAAQO,WACRP,QAAQG,MAAM,YACdH,QAAQI,IAAI,OAAQL,EAAUhB,MAC9BiB,QAAQI,IAAI,SAAUL,EAAUS,QAChCR,QAAQO,WACRP,QAAQO,WACDb,QAIR,kBAAML,EAAAA,EAAAA,a,gFCzBJoB,EAAuB,SAAvBA,qBAAwBC,EAAQC,GACzC,+BACID,EAAOE,QACH,SAACC,EAAKC,EAAOC,GACT,OAAAF,EAAIG,OAAO,IAAIC,MAAMN,EAAQI,IAAQG,KAAKJ,MAC9C,MAICK,EAAkB,SAAlBA,gBAAkBC,GAC3B,yBAAoB,IAAMA,GAEjBC,EAAa,SAAbA,WAAcC,EAAgBC,GACvC,IAAMC,EACFF,aAAmBG,KACbH,EAAQI,UACRD,KAAKE,MAAQ,QAEjBC,GADQL,aAAmBE,KAAOF,EAAQG,UAAYD,KAAKE,OAC3CH,EAChBK,EAAc,kBAAoB,CAAEC,IAAKF,IAEzCG,EAAKC,KAAKC,KAAKJ,EAAcD,GAASA,EAC5C,OAAO,IAAIH,KAAKD,EAAQO,IAGfG,EAAc,SAAdA,YAAeC,EAAKL,GAC7B,OAAAM,WAAW,kBAAoB,CAAED,IAAG,EAAEL,IAAG,EAAEO,UAAW,MAAQC,QAAQ,K,8MCxBpEC,EAAoB,CACtBC,QAAS,CACL,WACA,YACA,YACA,eACA,UACA,eACA,cACA,mBACA,gBACA,gBAEJC,MAAO,CACH,eACA,eACA,sBACA,cACA,aACA,gBACA,cACA,cACA,iBACA,eAEJC,SAAU,CACN,iBACA,gBACA,cACA,YACA,aACA,cACA,eACA,aACA,eACA,aACA,gBAEJC,KAAM,CACF,YACA,eACA,sBACA,aACA,YACA,gBACA,cACA,iBACA,gBACA,gBAEJC,KAAM,CACF,gBACA,aACA,mBACA,eACA,WACA,cACA,kBACA,gBACA,aACA,eAEJC,QAAS,CACL,eACA,cACA,iBACA,aACA,cACA,cACA,YACA,aACA,mBACA,iBAEJC,KAAM,CACF,cACA,YACA,gBACA,YACA,eACA,yBACA,cACA,cACA,aACA,cAEJC,OAAQ,CACJ,oBACA,WACA,aACA,eACA,kBACA,aACA,YACA,aACA,cACA,iBAEJC,OAAQ,CACJ,iBACA,gBACA,aACA,gBACA,eACA,gBACA,mBACA,cACA,cACA,iBAEJC,OAAQ,CACJ,eACA,aACA,YACA,YACA,iBACA,aACA,eACA,eACA,UACA,eAEJC,KAAM,CACF,eACA,aACA,iBACA,aACA,aACA,eACA,cACA,gBACA,WACA,iBAEJC,OAAQ,CACJ,cACA,cACA,aACA,mBACA,eACA,cACA,WACA,iBACA,cACA,eAEJC,MAAO,CACH,eACA,YACA,aACA,eACA,WACA,aACA,eACA,eACA,mBACA,c,0OC7IR,iBAAgBC,QAAA,IAAAA,IAAAA,EAAA,CAAYpE,eAAe,IACvC,IAAMqE,EAAK,GASX,OARAA,EAAGC,UCjBP,SAAgBD,EAAI,G,IAAErE,EAAa,gBAG3BuE,EAAoB,EAExB,OAAOvC,MAAMwC,KAAKxC,MAAM,KAAKyC,QAAQC,KAAI,SAAAC,GACrC,IAAMC,EAAaxC,IACbyC,EAAYzC,EAAWwC,GACvBE,EACF5C,EAAgB,KAAOqC,EAPV,IAQXQ,EAAa,EAAAC,KAAA,YACbC,EAAY,EAAAD,KAAA,WACZE,EAAQ,EAAAC,SAAA,MAAeJ,EAAYE,GACnCG,EAAWN,EAAc,EAAAO,KAAA,KAAU,IAAM,KACzCC,EAASR,EACT,uCACAP,EACA,aACAgB,EAMN,OAJIT,GACAP,IAGG,CACHI,GAAE,EACFI,WAAU,EACVE,UAAS,EACTC,MAAK,E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","sources":["fakeServer/graphql.ts","../../data-generator/src/utils.ts","../../data-generator/src/products.ts","../../data-generator/src/index.ts","../../data-generator/src/customers.ts","../../data-generator/src/categories.ts","../../data-generator/src/commands.ts","../../data-generator/src/invoices.ts","../../data-generator/src/reviews.ts","../../data-generator/src/finalize.ts"],"sourcesContent":["import JsonGraphqlServer from 'json-graphql-server';\nimport generateData from 'data-generator-retail';\nimport fetchMock from 'fetch-mock';\n\nexport default () => {\n    const data = generateData({ serializeDate: false });\n    const restServer = JsonGraphqlServer({ data });\n    const handler = restServer.getHandler();\n    const handlerWithLogs = (url: string, opts: any) =>\n        handler(url, opts).then((res: any) => {\n            const req = JSON.parse(opts.body);\n            const parsedRes = JSON.parse(res.body);\n            console.groupCollapsed(`GraphQL ${req.operationName}`);\n            console.group('request');\n            console.log('operationName', req.operationName);\n            console.log(req.query);\n            console.log('variables', req.variables);\n            console.groupEnd();\n            console.group('response');\n            console.log('data', parsedRes.data);\n            console.log('errors', parsedRes.errors);\n            console.groupEnd();\n            console.groupEnd();\n            return res;\n        });\n\n    fetchMock.mock('begin:http://localhost:4000', handlerWithLogs);\n    return () => fetchMock.restore();\n};\n","import faker from 'faker/locale/en';\n\nexport const weightedArrayElement = (values, weights) =>\n    faker.random.arrayElement(\n        values.reduce(\n            (acc, value, index) =>\n                acc.concat(new Array(weights[index]).fill(value)),\n            []\n        )\n    );\n\nexport const weightedBoolean = likelyhood =>\n    faker.random.number(99) < likelyhood;\n\nexport const randomDate = (minDate?: Date, maxDate?: Date) => {\n    const minTs =\n        minDate instanceof Date\n            ? minDate.getTime()\n            : Date.now() - 5 * 365 * 24 * 60 * 60 * 1000; // 5 years\n    const maxTs = maxDate instanceof Date ? maxDate.getTime() : Date.now();\n    const range = maxTs - minTs;\n    const randomRange = faker.random.number({ max: range });\n    // move it more towards today to account for traffic increase\n    const ts = Math.sqrt(randomRange / range) * range;\n    return new Date(minTs + ts);\n};\n\nexport const randomFloat = (min, max) =>\n    parseFloat(faker.random.number({ min, max, precision: 0.01 }).toFixed(2));\n","import { random, lorem } from 'faker/locale/en';\n\nimport { randomFloat, weightedBoolean } from './utils';\n\nconst productReferences = {\n    animals: [\n        'Cat Nose',\n        'Dog Grass',\n        'Brown Cow',\n        'Leopard Road',\n        'Sad Dog',\n        'Pelican Pier',\n        'Green Birds',\n        'Concrete Seaguls',\n        'Hiding Seagul',\n        'Sand Caravan',\n    ],\n    beard: [\n        'Black Auburn',\n        'Basket Beard',\n        'Handlebar Moustache',\n        'White Beard',\n        'Sailor Man',\n        'Natural Beard',\n        'Yeard Phone',\n        'Braid Beard',\n        'Terminal Black',\n        'Short Boxed',\n    ],\n    business: [\n        'Corporate Prop',\n        'Office Chairs',\n        'White Clock',\n        'Work Suit',\n        'Suit & Tie',\n        'Shake Hands',\n        'Building Sky',\n        'Yellow Pad',\n        'Work Devices',\n        'Hands Clap',\n        'Work Meeting',\n    ],\n    cars: [\n        'Old Combi',\n        'Asian Plates',\n        'Pedestrian Crossing',\n        'Farmer Boy',\n        'Make Over',\n        'Sports Sunset',\n        'Desert Jeep',\n        'Highway Bridge',\n        'Race Stickers',\n        'White Deluxe',\n    ],\n    city: [\n        'Bridge Lights',\n        'Color Dots',\n        'Cloud Suspension',\n        'Paved Street',\n        'Blue Bay',\n        'Wooden Door',\n        'Concrete Angles',\n        'London Lights',\n        'Fort Point',\n        'Rainy Glass',\n    ],\n    flowers: [\n        'Apricot Tree',\n        'Orange Rose',\n        'Purple Petunia',\n        'Water Lily',\n        'White Peony',\n        'Poppy Field',\n        'Blue Flax',\n        'Love Roses',\n        'California Poppy',\n        'Dalhia Colors',\n    ],\n    food: [\n        'Fuzzy Forks',\n        'Stamp Mug',\n        'Two Expressos',\n        'Red Latte',\n        'Black Grapes',\n        'Forgotten Strawberries',\n        'Close Steam',\n        'Brewing Tea',\n        'Red Onions',\n        'Dark Honey',\n    ],\n    nature: [\n        'Distant Mountains',\n        'Fog Pond',\n        'Sand Rocks',\n        'Pebble Shore',\n        'Eroded Fractals',\n        'Water Fall',\n        'Drif Wood',\n        'Dirt Track',\n        'Green Grass',\n        'Yellow Lichen',\n    ],\n    people: [\n        'Crossing Alone',\n        'Budding Grove',\n        'Light Hair',\n        'Black & White',\n        'Rock Concert',\n        'Meeting Bench',\n        'Son & Lumière',\n        'Running Boy',\n        'Dining Hall',\n        'Tunnel People',\n    ],\n    sports: [\n        'Feather Ball',\n        'Wall Skate',\n        'Kick Flip',\n        'Down Hill',\n        'Baseball Night',\n        'Touch Line',\n        'Alone Jogger',\n        'Green Basket',\n        'Mud Hug',\n        'Metal Cycle',\n    ],\n    tech: [\n        'Black Screen',\n        'Phone Call',\n        'Tablet & Phone',\n        'No Battery',\n        'Phone Book',\n        'Camera Parts',\n        'Fuzzy Phone',\n        'Music & Light',\n        'Eye Rest',\n        'Aligned Parts',\n    ],\n    travel: [\n        'Distant Jet',\n        'Foggy Beach',\n        'White Lime',\n        'Mysterious Cloud',\n        'Mountain Top',\n        'Light House',\n        'Gray Day',\n        'Desert Walkway',\n        'Train Track',\n        'Plane Trees',\n    ],\n    water: [\n        'Fresh Stream',\n        'Reed Line',\n        'Mud Tracks',\n        'Beach Gazebo',\n        'Calm Sea',\n        'Early Bath',\n        'Aerial Coast',\n        'Canal Street',\n        'Artificial Beach',\n        'Rainy Day',\n    ],\n};\n\nexport default db => {\n    let id = 0;\n\n    return db.categories.reduce(\n        (acc, category) => [\n            ...acc,\n            ...Array.from(Array(10).keys()).map(index => {\n                const width = randomFloat(10, 40);\n                const height = randomFloat(10, 40);\n\n                return {\n                    id: id++,\n                    category_id: category.id,\n                    reference: productReferences[category.name][index],\n                    width: width,\n                    height: height,\n                    price: randomFloat(\n                        (width * height) / 20,\n                        (width * height) / 15\n                    ),\n                    thumbnail:\n                        'https://marmelab.com/posters/' +\n                        category.name +\n                        '-' +\n                        (index + 1) +\n                        '.jpeg',\n                    image:\n                        'https://marmelab.com/posters/' +\n                        category.name +\n                        '-' +\n                        (index + 1) +\n                        '.jpeg',\n                    description: lorem.paragraph(),\n                    stock: weightedBoolean(10)\n                        ? 0\n                        : random.number({ min: 0, max: 150 }),\n                    sales: 0,\n                };\n            }),\n        ],\n        []\n    );\n};\n","import { RaRecord } from 'ra-core';\n\nimport generateCustomers from './customers';\nimport generateCategories from './categories';\nimport generateProducts from './products';\nimport generateCommands from './commands';\nimport generateInvoices from './invoices';\nimport generateReviews from './reviews';\nimport finalize from './finalize';\n\nexport interface Db {\n    customers: RaRecord[];\n    categories: RaRecord[];\n    products: RaRecord[];\n    commands: RaRecord[];\n    invoices: RaRecord[];\n    reviews: RaRecord[];\n}\n\nexport default (options = { serializeDate: true }): Db => {\n    const db = {} as Db;\n    db.customers = generateCustomers(db, options);\n    db.categories = generateCategories();\n    db.products = generateProducts(db);\n    db.commands = generateCommands(db, options);\n    db.invoices = generateInvoices(db);\n    db.reviews = generateReviews(db, options);\n    finalize(db);\n\n    return db;\n};\n","import { date, name, internet, address } from 'faker/locale/en';\n\nimport { randomDate, weightedBoolean } from './utils';\n\nexport default (db, { serializeDate }) => {\n    // This is the total number of people pictures available. We only use those pictures for actual customers\n    const maxCustomers = 223;\n    let numberOfCustomers = 0;\n\n    return Array.from(Array(900).keys()).map(id => {\n        const first_seen = randomDate();\n        const last_seen = randomDate(first_seen);\n        const has_ordered =\n            weightedBoolean(25) && numberOfCustomers < maxCustomers;\n        const first_name = name.firstName();\n        const last_name = name.lastName();\n        const email = internet.email(first_name, last_name);\n        const birthday = has_ordered ? date.past(60) : null;\n        const avatar = has_ordered\n            ? 'https://marmelab.com/posters/avatar-' +\n              numberOfCustomers +\n              '.jpeg'\n            : undefined;\n\n        if (has_ordered) {\n            numberOfCustomers++;\n        }\n\n        return {\n            id,\n            first_name,\n            last_name,\n            email,\n            address: has_ordered ? address.streetAddress() : null,\n            zipcode: has_ordered ? address.zipCode() : null,\n            city: has_ordered ? address.city() : null,\n            stateAbbr: has_ordered ? address.stateAbbr() : null,\n            avatar,\n            birthday:\n                serializeDate && birthday ? birthday.toISOString() : birthday,\n            first_seen: serializeDate ? first_seen.toISOString() : first_seen,\n            last_seen: serializeDate ? last_seen.toISOString() : last_seen,\n            has_ordered: has_ordered,\n            latest_purchase: null, // finalize\n            has_newsletter: has_ordered ? weightedBoolean(30) : true,\n            groups: [], // finalize\n            nb_commands: 0,\n            total_spent: 0,\n        };\n    });\n};\n","export default () => [\n    { id: 0, name: 'animals' },\n    { id: 1, name: 'beard' },\n    { id: 2, name: 'business' },\n    { id: 3, name: 'cars' },\n    { id: 4, name: 'city' },\n    { id: 5, name: 'flowers' },\n    { id: 6, name: 'food' },\n    { id: 7, name: 'nature' },\n    { id: 8, name: 'people' },\n    { id: 9, name: 'sports' },\n    { id: 10, name: 'tech' },\n    { id: 11, name: 'travel' },\n    { id: 12, name: 'water' },\n];\n","import { random } from 'faker/locale/en';\nimport { isAfter, subDays } from 'date-fns';\n\nimport {\n    randomDate,\n    randomFloat,\n    weightedArrayElement,\n    weightedBoolean,\n} from './utils';\n\nexport default (db, { serializeDate }) => {\n    const today = new Date();\n    const aMonthAgo = subDays(today, 30);\n    const realCustomers = db.customers.filter(customer => customer.has_ordered);\n\n    return Array.from(Array(600).keys()).map(id => {\n        const nbProducts = weightedArrayElement(\n            [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n            [30, 20, 5, 2, 1, 1, 1, 1, 1, 1]\n        );\n        const basket = Array.from(Array(nbProducts).keys()).map(() => ({\n            product_id: random.number({ min: 0, max: 10 * 13 - 1 }),\n            quantity: weightedArrayElement(\n                [1, 2, 3, 4, 5],\n                [10, 5, 3, 2, 1]\n            ) as number,\n        }));\n\n        const total_ex_taxes = basket.reduce(\n            (total, product) =>\n                total +\n                db.products[product.product_id].price * product.quantity,\n            0\n        );\n\n        const delivery_fees = randomFloat(3, 8);\n        const tax_rate = random.arrayElement([0.12, 0.17, 0.2]);\n        const taxes = parseFloat(\n            ((total_ex_taxes + delivery_fees) * tax_rate).toFixed(2)\n        );\n        const customer = random.arrayElement<any>(realCustomers);\n        const date = randomDate(customer.first_seen, customer.last_seen);\n\n        const status =\n            isAfter(date, aMonthAgo) && random.boolean()\n                ? 'ordered'\n                : weightedArrayElement(['delivered', 'cancelled'], [10, 1]);\n        return {\n            id,\n            reference: random.alphaNumeric(6).toUpperCase(),\n            date: serializeDate ? date.toISOString() : date,\n            customer_id: customer.id,\n            basket: basket,\n            total_ex_taxes: total_ex_taxes,\n            delivery_fees: delivery_fees,\n            tax_rate: tax_rate,\n            taxes: taxes,\n            total: parseFloat(\n                (total_ex_taxes + delivery_fees + taxes).toFixed(2)\n            ),\n            status: status,\n            returned: status === 'delivered' ? weightedBoolean(10) : false,\n        };\n    });\n};\n","export default db => {\n    let id = 0;\n\n    return (\n        db.commands\n            .filter(command => command.status !== 'delivered')\n            // @ts-ignore\n            .sort((a, b) => new Date(a.date) - new Date(b.date))\n            .map(command => ({\n                id: id++,\n                date: command.date,\n                command_id: command.id,\n                customer_id: command.customer_id,\n                total_ex_taxes: command.total_ex_taxes,\n                delivery_fees: command.delivery_fees,\n                tax_rate: command.tax_rate,\n                taxes: command.taxes,\n                total: command.total,\n            }))\n    );\n};\n","import { random, lorem } from 'faker/locale/en';\nimport { subDays, isAfter } from 'date-fns';\n\nimport { randomDate, weightedArrayElement, weightedBoolean } from './utils';\n\nexport default (db, { serializeDate }) => {\n    const today = new Date();\n    const aMonthAgo = subDays(today, 30);\n\n    let id = 0;\n    const reviewers = db.customers\n        .filter(customer => customer.has_ordered)\n        .filter(() => weightedBoolean(60)) // only 60% of buyers write reviews\n        .map(customer => customer.id);\n\n    return db.commands\n        .filter(command => reviewers.indexOf(command.customer_id) !== -1)\n        .reduce(\n            (acc, command) => [\n                ...acc,\n                ...command.basket\n                    .filter(() => weightedBoolean(40)) // reviewers review 40% of their products\n                    .map(product => {\n                        const date = randomDate(command.date);\n                        const status = isAfter(aMonthAgo, date)\n                            ? weightedArrayElement(\n                                  ['accepted', 'rejected'],\n                                  [3, 1]\n                              )\n                            : weightedArrayElement(\n                                  ['pending', 'accepted', 'rejected'],\n                                  [5, 3, 1]\n                              );\n\n                        return {\n                            id: id++,\n                            date: serializeDate ? date.toISOString() : date,\n                            status: status,\n                            command_id: command.id,\n                            product_id: product.product_id,\n                            customer_id: command.customer_id,\n                            rating: random.number({ min: 1, max: 5 }),\n                            comment: Array.apply(\n                                null,\n                                Array(random.number({ min: 1, max: 5 }))\n                            )\n                                .map(() => lorem.sentences())\n                                .join('\\n \\r'),\n                        };\n                    }),\n            ],\n            []\n        );\n};\n","import { weightedBoolean } from './utils';\n\nexport default function (db) {\n    // set latest purchase date\n    db.commands.forEach(command => {\n        let customer = db.customers[command.customer_id];\n        if (\n            !customer.latest_purchase ||\n            customer.latest_purchase < command.date\n        ) {\n            customer.latest_purchase = command.date;\n        }\n        customer.total_spent += command.total;\n        customer.nb_commands++;\n    });\n\n    // set product sales\n    db.commands.forEach(command => {\n        command.basket.forEach(item => {\n            db.products[item.product_id].sales += item.quantity;\n        });\n    });\n\n    // add 'collector' group\n    const customersBySpending = db.commands.reduce((customers, command) => {\n        if (!customers[command.customer_id]) {\n            customers[command.customer_id] = { nbProducts: 0 };\n        }\n        customers[command.customer_id].nbProducts += command.basket.length;\n        return customers;\n    }, {});\n    Object.keys(customersBySpending).forEach(customer_id => {\n        if (customersBySpending[customer_id].nbProducts > 10) {\n            db.customers[customer_id].groups.push('collector');\n        }\n    });\n\n    // add 'ordered_once' group\n    db.customers\n        .filter(customer => customer.nb_commands === 1)\n        .forEach(customer => customer.groups.push('ordered_once'));\n\n    // add 'compulsive' group\n    db.customers\n        .filter(customer => customer.total_spent > 1500)\n        .forEach(customer => customer.groups.push('compulsive'));\n\n    // add 'regular' group\n    db.customers\n        .filter(() => weightedBoolean(20))\n        .forEach(customer => customer.groups.push('regular'));\n\n    // add 'returns' group\n    db.commands\n        .filter(command => command.returned)\n        .forEach(command => {\n            if (\n                db.customers[command.customer_id].groups.indexOf('returns') ===\n                -1\n            ) {\n                db.customers[command.customer_id].groups.push('returns');\n            }\n        });\n\n    // add 'reviewer' group\n    db.reviews.forEach(review => {\n        let customer = db.customers[review.customer_id];\n        if (customer.groups.indexOf('reviewer') === -1) {\n            customer.groups.push('reviewer');\n        }\n    });\n\n    // add settings\n    db.settings = [\n        {\n            id: 1,\n            configuration: {\n                url: 'http://posters-galore.com/',\n                mail: {\n                    sender: 'julio@posters-galore.com',\n                    transport: {\n                        service: 'fakemail',\n                        auth: {\n                            user: 'fake@mail.com',\n                            pass: 'f00b@r',\n                        },\n                    },\n                },\n                file_type_whiltelist: [\n                    'txt',\n                    'doc',\n                    'docx',\n                    'xls',\n                    'xlsx',\n                    'pdf',\n                    'png',\n                    'jpg',\n                ],\n            },\n        },\n    ];\n}\n"],"names":["data","generateData","serializeDate","handler","JsonGraphqlServer","getHandler","fetchMock","handlerWithLogs","url","opts","then","res","req","JSON","parse","body","parsedRes","console","groupCollapsed","operationName","group","log","query","variables","groupEnd","errors","weightedArrayElement","values","weights","reduce","acc","value","index","concat","Array","fill","weightedBoolean","likelyhood","randomDate","minDate","maxDate","minTs","Date","getTime","now","range","randomRange","max","ts","Math","sqrt","randomFloat","min","parseFloat","precision","toFixed","productReferences","animals","beard","business","cars","city","flowers","food","nature","people","sports","tech","travel","water","options","db","customers","numberOfCustomers","from","keys","map","id","first_seen","last_seen","has_ordered","first_name","name","last_name","email","internet","birthday","date","avatar","undefined","address","zipcode","stateAbbr","toISOString","latest_purchase","has_newsletter","groups","nb_commands","total_spent","categories","products","category","width","height","category_id","reference","price","thumbnail","image","description","lorem","stock","random","sales","commands","today","aMonthAgo","subDays","realCustomers","filter","customer","nbProducts","basket","product_id","quantity","total_ex_taxes","total","product","delivery_fees","tax_rate","taxes","status","isAfter","toUpperCase","customer_id","returned","invoices","command","sort","a","b","command_id","reviews","reviewers","indexOf","rating","comment","apply","join","forEach","item","customersBySpending","length","Object","push","review","settings","configuration","mail","sender","transport","service","auth","user","pass","file_type_whiltelist","finalize"],"sourceRoot":""}